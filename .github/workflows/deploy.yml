name: Deploy Modulos to Remote Servers

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cliente:
        description: 'Cliente específico a desplegar'
        required: true
        type: choice
        options:
          #- gaesa
          - gaesademo
          #- acricolor
          - medical

jobs:
  deploy-single:
    if: github.event_name == 'workflow_dispatch'
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy using SSH
        shell: bash
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_USER: root
          CLIENTE: ${{ github.event.inputs.cliente }}
        run: |
          # Configuración de despliegue por cliente
          declare -A CLIENT_CONFIG
          #CLIENT_CONFIG["gaesa"]="192.168.102.7:/var/www/appgaesa/src/:systemctl restart appgaesa"
          CLIENT_CONFIG["gaesademo"]="192.168.200.11:/home/gaesa/src/:docker restart gaesa"
          #CLIENT_CONFIG["acricolor"]="192.168.200.11:/home/acricolor/src/:docker restart acricolor"
          CLIENT_CONFIG["medical"]="192.168.200.11:/home/medical/src/:docker restart medical"
          
          # Obtener configuración del cliente
          IFS=':' read -r targetServer targetPath restartCommand <<< "${CLIENT_CONFIG[$CLIENTE]}"
          
          echo "Iniciando despliegue para $CLIENTE..."
          echo "Servidor: $targetServer"
          echo "Ruta: $targetPath"
          echo "Comando de reinicio: $restartCommand"
          
          # Asegurar que el directorio existe y tiene los permisos correctos
          echo "Asegurando directorio y permisos..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$targetServer" "mkdir -p $targetPath && chmod -R 755 $targetPath"
          
          # Realizar el despliegue (copiar todo excepto index.js)
          echo "Realizando despliegue de archivos..."
          sshpass -p "$SSH_PASSWORD" rsync -avz -e 'ssh -o StrictHostKeyChecking=no' --delete --exclude 'index.js' ./src/ "$SSH_USER@$targetServer:$targetPath"
          
          # Asegurar permisos después del despliegue
          echo "Asegurando permisos después del despliegue..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$targetServer" "chmod -R 755 $targetPath"
          
          # Actualizar la base de datos del cliente
          DB_NAME=$CLIENTE
          SQL_FILE="./src/DB/update.sql"
          echo "Verificando archivo SQL: $SQL_FILE"
          if [ -f "$SQL_FILE" ]; then
            echo "Copiando script SQL al servidor de base de datos..."
            sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no "$SQL_FILE" "$SSH_USER@192.168.200.3:/tmp/update.sql"
            echo "Ejecutando script SQL en la base de datos $DB_NAME..."
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@192.168.200.3" "mysql -u root -p'$SSH_PASSWORD' $DB_NAME < /tmp/update.sql"
            echo "Eliminando script SQL del servidor remoto..."
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@192.168.200.3" "rm /tmp/update.sql"
          else
            echo "No existe el archivo de actualización SQL, saltando..."
          fi
          
          # Reiniciar el servicio
          echo "Reiniciando servicio..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$targetServer" "$restartCommand"
          
          echo "Despliegue completado para $CLIENTE."

  deploy-all:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    strategy:
      matrix:
        cliente: [
          #'gaesa',
          'gaesademo',
          #'acricolor'
          'medical'
        ]
      fail-fast: false
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy using SSH
        shell: bash
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_USER: root
          CLIENTE: ${{ matrix.cliente }}
        run: |
          # Configuración de despliegue por cliente
          declare -A CLIENT_CONFIG
          #CLIENT_CONFIG["gaesa"]="192.168.102.7:/var/www/appgaesa/src/:systemctl restart appgaesa"
          CLIENT_CONFIG["gaesademo"]="192.168.200.11:/home/gaesa/src/:docker restart gaesa"
          #CLIENT_CONFIG["acricolor"]="192.168.200.11:/home/acricolor/src/:docker restart acricolor"
          CLIENT_CONFIG["medical"]="192.168.200.11:/home/medical/src/:docker restart medical"
          
          # Obtener configuración del cliente
          IFS=':' read -r targetServer targetPath restartCommand <<< "${CLIENT_CONFIG[$CLIENTE]}"
          
          echo "Iniciando despliegue para $CLIENTE..."
          echo "Servidor: $targetServer"
          echo "Ruta: $targetPath"
          echo "Comando de reinicio: $restartCommand"
          
          # Asegurar que el directorio existe y tiene los permisos correctos
          echo "Asegurando directorio y permisos..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$targetServer" "mkdir -p $targetPath && chmod -R 755 $targetPath"
          
          # Realizar el despliegue (copiar todo excepto index.js)
          echo "Realizando despliegue de archivos..."
          sshpass -p "$SSH_PASSWORD" rsync -avz -e 'ssh -o StrictHostKeyChecking=no' --delete --exclude 'index.js' ./src/ "$SSH_USER@$targetServer:$targetPath"
          
          # Asegurar permisos después del despliegue
          echo "Asegurando permisos después del despliegue..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$targetServer" "chmod -R 755 $targetPath"
          
          # Actualizar la base de datos del cliente
          DB_NAME=$CLIENTE
          SQL_FILE="./src/DB/update.sql"
          echo "Verificando archivo SQL: $SQL_FILE"
          if [ -f "$SQL_FILE" ]; then
            echo "Copiando script SQL al servidor de base de datos..."
            sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no "$SQL_FILE" "$SSH_USER@192.168.200.3:/tmp/update.sql"
            echo "Ejecutando script SQL en la base de datos $DB_NAME..."
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@192.168.200.3" "mysql -u root -p'$SSH_PASSWORD' $DB_NAME < /tmp/update.sql"
            echo "Eliminando script SQL del servidor remoto..."
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@192.168.200.3" "rm /tmp/update.sql"
          else
            echo "No existe el archivo de actualización SQL, saltando..."
          fi
          
          # Reiniciar el servicio
          echo "Reiniciando servicio..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$targetServer" "$restartCommand"
          
          echo "Despliegue completado para $CLIENTE."